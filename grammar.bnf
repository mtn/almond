<prototype>  ::= <identifier> '(' <params> ')'
<params>     ::= <identifier>
               | <identifier>, <params>
<definition> ::= 'def' <prototype> <expr> 'end'
<extern>     ::= 'extern' <prototype> ';'
<operator>   ::= '+' | '-' | '*' | '/' | '%' | '>' | '<' | '>=' | '<=' | '=='
<expr>       ::= <binary> | <call> | <identifier> | <number> | <ifelse>
               | '(' <expr> ')'
<binary>     ::= <expr> <operator> <expr>
<call>       ::= <identifier> '(' <arguments> ')'
<ifelse>     ::= 'if' <expr> 'then' <expr> 'else' <expr> 'end'
<arguments>  ::= <expr>
               | <expr> ',' <arguments>
